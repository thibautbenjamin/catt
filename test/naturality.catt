
# set explicit_substitutions = t
# set verbosity = 5
# set unroll_coherences = t

let idf (x : *) (y : *) (f : x -> y) : (comp (id x) f) -> (comp f (id y)) = id [f]

coh whiskl (x(f)y(g(a)h)z) : comp f g -> comp f h
let whisklf (x : *) (y : *) (f : x -> y) (g : x -> y) (z : *) (h : y -> z) (k : y -> z) (a : f -> g) (b : h -> k) = whiskl [a] b
let whisklf (x : *) (y : *) (f : x -> y) (g : x -> y) (z : *) (h : y -> z) (k : y -> z) (a : f -> g) (b : h -> k) (c : h -> k) (m : b -> c) = whiskl f [m]

coh assoc (x(f)y(g)z(h)w) : comp (comp f g) h -> comp f (comp g h)

let nat_assoc (x : *) (y : *) (z : *) (w : *)
              (f : x -> y) (g : y -> z) (h : z -> w)
              (f' : x -> y) (g' : y -> z) (h' : z -> w)
              (a : f -> f') (b : g -> g') (c : h -> h')
              = assoc [a] [b] [c]

let whiskL (x : *) (y : *) (f : x -> y) (z : *) (g : y -> z) (h : y -> z) (a : g -> h) = comp f [a]

let nat_assoc (x : *) (y : *) (z : *) (w : *)
              (f : x -> y) (g : y -> z) (h : z -> w)
              (f' : x -> y) (g' : y -> z) (h' : z -> w)
              (a : f -> f') (b : g -> g') (c : h -> h')
              (b' : g -> g') (B : b -> b')
              = assoc [a] [[B]] [c]

let exch (x : *) (y : *) (z : *)
         (f : x -> y) (g : y -> z)
         (f' : x -> y) (g' : y -> z)
         (a : f -> f') (b : g -> g')
         = whiskl [a] b

# coh unbiase (x(f)y(g)z(h)w) : comp (comp f g) h -> (comp f g h)

coh whiskl3 (x(f)y(g(a(m)b)h)z) : comp f [a] -> comp f [b]

let nat_whiskl3 (x : *) (y : *) (z : *)
              (f : x -> y) (g : y -> z)
              (f' : x -> y) (h : y -> z)
              (c : f -> f') (a : g -> h) (b : g -> h)
              (m : a -> b)
			  = whiskl3 [c] m

coh whiskl4 (x(f)y(g(a(m(p)n)b)h)z) : (comp f [[[p]]]) -> (comp f [[[p]]])

#let nat_whiskl4 (x : *) (y : *) (z : *)
#              (f : x -> y) (g : y -> z)
#              (f' : x -> y) (h : y -> z)
#              (c : f -> f') (a : g -> h) (b : g -> h)
#              (m: a -> b) (n: a -> b)
#              (p : m -> n)
#              = whiskl4 [c] p

let ccomp_manual (x : *) (y : *) (z : *)
          (f : x -> y) (g : y -> z)
	: (comp (id x) (comp f g)) -> (comp (comp f g) (id z))
	= comp (I (assoc (id x) f g)) (comp [id [f]] g) (assoc f (id y) g) (comp f [id [g]]) (I (assoc f g (id z)))

let ccomp1_test (x : *) (y : *)
          (f : x -> y)
		  : (comp (id x) (comp f)) -> (comp (comp f) (id y))
		  = ccomp (id [f])

let ccomp2_test (x : *) (y : *) (z : *)
          (f : x -> y) (g : y -> z)
		  : (comp (id x) (comp f g)) -> (comp (comp f g) (id z))
		  = ccomp (id [f]) (id [g])

let ccomp3_test (x : *) (y : *) (z : *) (w : *)
          (f : x -> y) (g : y -> z) (h : z -> w)
		  : (comp (id x) (comp f g h)) -> (comp (comp f g h) (id w))
		  = ccomp (id [f]) (id [g]) (id [h])

let ccomp4_test (x : *) (y : *) (z : *) (w : *) (u : *)
          (f : x -> y) (g : y -> z) (h : z -> w) (k : w -> u)
		  : (comp (id x) (comp f g h k)) -> (comp (comp f g h k) (id u))
		  = ccomp (id [f]) (id [g]) (id [h]) (id [k])

set postprocess = t
let ccomp2_test (x : *) (y : *) (z : *)
          (f : x -> y) (g : y -> z)
		  #: (comp (id x) (comp f g)) -> (comp (comp f g) (id z))
		  : x -> z
		  = comp f g
set postprocess = f

