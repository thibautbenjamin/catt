# set verbosity = 5
# set unroll_coherences = t

let idf (x : *) (y : *) (f : x -> y) : (comp (id x) f) -> (comp f (id y)) = id [f]

coh whiskl (x(f)y(g(a)h)z) : comp f g -> comp f h
let whisklf (x : *) (y : *) (f : x -> y) (g : x -> y) (z : *) (h : y -> z) (k : y -> z) (a : f -> g) (b : h -> k) = whiskl [a] b
let whisklf (x : *) (y : *) (f : x -> y) (g : x -> y) (z : *) (h : y -> z) (k : y -> z) (a : f -> g) (b : h -> k) (c : h -> k) (m : b -> c) = whiskl f [m]

coh assoc (x(f)y(g)z(h)w) : comp (comp f g) h -> comp f (comp g h)

let nat_assoc (x : *) (y : *) (z : *) (w : *)
              (f : x -> y) (g : y -> z) (h : z -> w)
              (f' : x -> y) (g' : y -> z) (h' : z -> w)
              (a : f -> f') (b : g -> g') (c : h -> h')
              = assoc [a] [b] [c]

let whiskL (x : *) (y : *) (f : x -> y) (z : *) (g : y -> z) (h : y -> z) (a : g -> h) = comp f [a]

let nat_assoc (x : *) (y : *) (z : *) (w : *)
              (f : x -> y) (g : y -> z) (h : z -> w)
              (f' : x -> y) (g' : y -> z) (h' : z -> w)
              (a : f -> f') (b : g -> g') (c : h -> h')
              (b' : g -> g') (B : b -> b')
              = assoc [a] [[B]] [c]

let exch (x : *) (y : *) (z : *)
         (f : x -> y) (g : y -> z)
         (f' : x -> y) (g' : y -> z)
         (a : f -> f') (b : g -> g')
         = whiskl [a] b

# coh unbiase (x(f)y(g)z(h)w) : comp (comp f g) h -> (comp f g h)

coh whiskl3 (x(f)y(g(a(m)b)h)z) : comp f [a] -> comp f [b]

let nat_whiskl3 (x : *) (y : *) (z : *)
              (f : x -> y) (g : y -> z)
              (f' : x -> y) (h : y -> z)
              (c : f -> f') (a : g -> h) (b : g -> h)
              (m : a -> b)
			  = whiskl3 [c] m

coh whiskl4 (x(f)y(g(a(m(p)n)b)h)z) : (comp f [[[p]]]) -> (comp f [[[p]]])

coh id2 (x) : comp (id x) (id x) (id x) -> comp (id x)
let nat_id2 (x : *) (y : *) (f : x -> y) = id2 [f]

coh vcompwhisk (x(f)y(g(a)h(b)k)z) : (comp (id x) f g) -> (comp f (id y) k)
let vcompwhisk2 (x : *) (y : *) (z : *)
          (f : x -> y) (g : y -> z)
		  = vcompwhisk f (id g) (id g)
let nat_vcompwhisk (x : *) (y : *) (z : *)
          (f : x -> y) (g : y -> z)
		  (f' : x -> y)
		  (g' : y -> z)
		  (a : f -> f') (b : f -> f') (c : g -> g') (d : g -> g')
		  = vcompwhisk2 [a] [c]

set explicit_substitutions = t
let triangle1 (x : *) (y : *) (y' : *) (ym : y -> y') (z : *)
              (f : x -> y) (f' : x -> y') (fm : comp x y f y' ym -> f')
              (g : y -> z) (g' : y' -> z) (gm : g -> comp y y' ym z g')
              = comp x [ym] [fm] z [gm]

let triangle2 (x : *) (x' : *) (xm : x -> x') (y : *) (z : *) (z' : *) (zm : z -> z')
              (f : x -> y) (f' : x' -> y) (fm : f -> comp x x' xm y f' )
              (g : y -> z) (g' : y -> z') (gm : comp y z g z' zm -> g')
              = comp [xm] y [fm] [zm] [gm]

set explicit_substitutions = f
let triangle1_bis (x : *) (y : *) (y' : *) (ym : y -> y') (z : *)
              (f : x -> y) (f' : x -> y') (fm : comp f ym -> f')
              (g : y -> z) (g' : y' -> z) (gm : g -> comp ym g')
              = @comp _ [_] [fm] _ [gm]

let triangle2_bis (x : *) (x' : *) (xm : x -> x') (y : *) (z : *) (z' : *) (zm : z -> z')
              (f : x -> y) (f' : x' -> y) (fm : f -> comp xm f' )
              (g : y -> z) (g' : y -> z') (gm : comp g zm -> g')
              = @comp [_] _ [fm] [_] [gm]

coh example (x(f(a)g(b)h)y(k(c)l)z) : comp f k (id z) -> comp h l
let ex1 (x : *) (y : *) (z : *) (f : x -> y)
       (g : x -> y) (g+ : x -> y) (gm : g -> g+)
       (h : x -> y) (h+ : x -> y) (hm : h -> h+)
       (a : f -> g) (a+ : f -> g+) (am : comp a gm -> a+)
       (b : g -> h) (b+ : g+ -> h+) (bm : comp b hm -> comp gm b+)
       (k : y -> z)
       (l : y -> z) (l+ : y -> z) (lm : l -> l+)
       (c : k -> l) (c+ : k -> l+) (cm : comp c lm -> c+)
       = @example _ _ _ [_] [am] [_] [bm] _ _ [_] [cm]

let ex2 (x : *) (y : *) (z : *) (f : x -> y)
        (g : x -> y) (g+ : x -> y) (gm : g -> g+)
        (h : x -> y) (h+ : x -> y) (hm : h -> h+)
        (a : f -> g) (a+ : f -> g+) (am : comp a gm -> a+)
        (b : g -> h) (b+ : g+ -> h+) (bm : comp b hm -> comp gm b+)
        (k : y -> z) (k+ : y -> z) (km : k -> k+)
        (l : y -> z)
        (c : k -> l) (c+ : k+ -> l) (cm : c -> comp km c+)
        = @example _ _ _ [_] [am] [_] [bm] _ [_] _ [cm]


let ex3 (x : *) (y : *) (z : *) (f : x -> y)
        (g : x -> y) (g+ : x -> y) (gm : g -> g+)
        (h : x -> y) (h+ : x -> y) (hm : h -> h+)
        (a : f -> g) (a+ : f -> g+) (am : comp a gm -> a+)
        (b : g -> h) (b+ : g+ -> h+) (bm : comp b hm -> comp gm b+)
        (k : y -> z) (k+ : y -> z) (km : k -> k+)
        (l : y -> z) (l+ : y -> z) (lm : l -> l+)
        (c : k -> l) (c+ : k+ -> l+) (cm : comp c lm -> comp km c+)
         = @example _ _ _ [_] [am] [_] [bm] _ [_] [_] [cm]
