### Definition of associators
# Format = focus(n) (n = half the arity)

coh focus3 (x0 : *) (x1 : *) (f1 : x0 -> x1)
    	       	    (x2 : *) (f2 : x1 -> x2)
		    (x3 : *) (f3 : x2 -> x3)
		    (x4 : *) (f4 : x3 -> x4)
		    (x5 : *) (f5 : x4 -> x5)
		    (x6 : *) (f6 : x5 -> x6) :
		    comp (comp f1 f2 f3) (comp f4 f5 f6) -> comp f1 f2 (comp f3 f4) f5 f6

### Unitors for composition
# Format = id(n)@(k) (n = arity, k < n, k = where to insert the identity)
coh id2@1 (x : *) (y : *) (f : x -> y) : comp (id x) f -> f
coh id2@2 (x : *) (y : *) (f : x -> y) : comp f (id y) -> f

### interchanging left and right unitors when possible
coh id2@/1-,2-/     (x : *) :  I (id2@1 (id x)) -> I (id2@2 (id x))
coh id2@/1,2/       (x : *) : id2@1 (id x) -> id2@2 (id x)

### cancelling left and right unitors
coh id2@2@1U  (x : *) : comp (id2@2 (id x)) (I (id2@1 (id x))) -> id (comp (id x) (id x))
coh id2@1@2U   (x : *) : comp (id2@1 (id x)) (I (id2@2 (id x))) -> id (comp (id x) (id x))

### DEFINITION OF TACTICS

### Some "focused" versions of cancellation lemmas
# Format = "nameF" (F = focused) : cancellation and association combined
coh id5@3F (x1 : *) (x2 : *) (f1 : x1 -> x2) (x3 : *) (f2 : x2 -> x3) (x4 : *) (f3 : x3 -> x4) (x5 : *) (f4 : x4 -> x5) :
comp f1 f2 (id x3) f3 f4 -> comp f1 (comp f2 f3) f4

### Tactics for reducing
# simplifies a composition f1 f2  f(2n-1) f(2n) into a smaller composition when some intermediate cells cancel
let red3F (x0 : *) (x1 : *) (x2 : *) (x2m : *) (x3 : *) (x4 : *)
    	  (f1 : x0 -> x1) (f2 : x1 -> x2)
	  (f3 : x2 -> x2m) (f4 : x2m -> x2) (s : comp f3 f4 -> id x2)
	  (f5 : x2 -> x3) (f6 : x3 -> x4) =
	  comp (focus3 f1 f2 f3 f4 f5 f6)
	       (comp f1 f2 [s] f5 f6)
	       (id5@3F f1 f2 f5 f6)

let red3F- (x0 : *) (x1 : *) (x2 : *) (x2m : *) (x3 : *) (x4 : *)
    	   (f1 : x0 -> x1) (f2 : x1 -> x2)
	   (f3 : x2 -> x2m) (f4 : x2m -> x2) (s : id x2 -> comp f3 f4)
	   (f5 : x2 -> x3) (f6 : x3 -> x4) =
	   comp (I (id5@3F f1 f2 f5 f6))
     	        (comp f1 f2 [s] f5 f6)
	        (I (focus3 f1 f2 f3 f4 f5 f6))

### Some operations on 2-cells
# Format = rew(n)@(k)id@(l)  :unitor for the substitution of id in the place l in the coherence rew(n)@(k)
coh rew2@2id@1 (x : *) (y : *) (f : x -> y) (g : x -> y) (a : f -> g) :
    comp (I (id2@1 f)) (comp (id x) [a]) (id2@1 g) -> a

coh rew2@1id@2 (x : *) (y : *) (f : x -> y) (g : x -> y) (a : f -> g) :
    comp (I (id2@2 f)) (comp [a] (id y)) (id2@2 g) -> a

# Format = exch : exchange rule
coh exch (x : *) (y : *) (f : x -> y) (g : x -> y) (a : f -> g)
    	      	 (z : *) (h : y -> z) (k : y -> z) (b : h -> k) :
		 comp (comp [a] h) (comp g [b]) -> comp (comp f [b]) (comp [a] k)

### Eckmann-Hilton morphism, inverse and cancellation
let eh (x : *) (a : id x -> id x) (b : id x  -> id x) =
    comp  (comp [I (rew2@1id@2 a)] [I (rew2@2id@1 b)])
	  (red3F (I (id2@2 (id x))) (comp [a] (id x)) (id2@2@1U x) (comp (id x) [b]) (id2@1 (id x)))
	  (comp [I (id2@/1-,2-/ x)] [exch a b] [id2@/1,2/ x])
	  (red3F- (I (id2@1 (id x))) (comp (id x) [b]) (I (id2@1@2U x)) (comp [a] (id x)) (id2@2 (id x)))
	  (comp [rew2@2id@1 b] [rew2@1id@2 a])

let eh- (x : *) (a : id x -> id x) (b : id x  -> id x) = I (eh a b)

let ehU (x : *) (a : id x -> id x) (b : id x  -> id x) : comp (eh a b) (I (eh a b)) -> id (comp a b) = U (eh a b)
