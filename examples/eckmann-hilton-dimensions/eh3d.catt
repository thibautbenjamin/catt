coh unitl (x(f)y) : comp (id _) f -> f
coh unit (x) : comp (id x) (id x) -> id x
coh lsimp (x) : (unitl (id x)) -> unit x
coh Ilsimp (x) : I (unitl (id x)) -> I (unit x)

coh sandwisk (x(f)y(g(a)h)z(k)w) : comp f g k -> comp f h k

let sandwich (x : *) (y : *) (f : x -> y) (g : x -> y) (a : f -> g) = comp (I (unitl f)) (comp [id (id x)] [a]) (unitl g)
coh uunitl (x(f(a)g)y) : a -> sandwich a

coh step1 (x(f(a(m)b(n)c)g)y) : comp m n ->
  comp (uunitl a) (comp (sandwich [m]) (comp (I (uunitl b)) (op { 1 } (uunitl b))) (op { 1 } (sandwich [n]))) (op { 1 } (I (uunitl c)))

coh toaster (x) : comp (I (uunitl (id (id x)))) (op { 1 } (uunitl (id (id x)))) ->
  comp
  (comp [Ilsimp _] (comp [id (id x)] [id (id x)]) [lsimp _])
  (comp [I (op { 1 } (Ilsimp _))] (comp [id (id x)] [id (id x)]) [I (op { 1 } (lsimp _))])

coh unfocus (x(f)y(g)z(h)w(k)u) : comp f (comp g h) k -> comp (comp f g) (comp h k)

let step21 (x : *) (m : id (id x) -> id (id x)) (n : id (id x) -> id (id x)) =
  comp (sandwich [m]) [toaster _] (op { 1 } (sandwich [n]))

let step23 (x : *) (m : id (id x) -> id (id x)) (n : id (id x) -> id (id x)) =
  comp [sandwisk [Ilsimp x] (comp [id (id x)] [[m]]) [lsimp x]]
  [I (sandwisk [I (op { 1 } (Ilsimp x))] (comp [[n]] [id (id x)]) [I (op { 1 } (lsimp x))])]

coh sandswitch (x(f)y(g(a)h(b)k)z(l)w) : comp (sandwisk f a l) (sandwisk f b l) -> sandwisk f (comp a b) l

let step24 (x : *) (m : id (id x) -> id (id x)) (n : id (id x) -> id (id x)) =
  sandswitch (I (unit x)) (comp [id (id x)] [[m]]) (comp [[n]] [id (id x)]) (unit x)

coh intch20 (x(f(a(n)b)g)y(h(c(m)d)k)z) : comp (comp [a] [[m]]) (comp [[n]] [d]) -> comp [[n]] [[m]]

let step25 (x : *) (m : id (id x) -> id (id x)) (n : id (id x) -> id (id x)) =
  sandwisk (I (unit x)) [intch20 n m] (unit x)

let step2inner (x : *) (m : id (id x) -> id (id x)) (n : id (id x) -> id (id x)) =
  comp (step21 m n) (unfocus (sandwich [m]) _ _ _ ) (step23 m n) (I (unfocus (comp [Ilsimp x] _ [lsimp x]) _ _ _)) (comp _ [comp (step24 m n) (step25 m n)] _)

let step2 (x : *) (m : id (id x) -> id (id x)) (n : id (id x) -> id (id x)) =
  comp (uunitl (id (id x))) [step2inner m n] (op { 1 } (I (uunitl (id (id x)))))

let final (x : *) (m : id (id x) -> id (id x)) (n : id (id x) -> id (id x)) = comp (step1 m n) (step2 m n)
