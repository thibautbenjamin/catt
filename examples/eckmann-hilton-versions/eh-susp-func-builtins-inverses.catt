### Definition of associators
# Format = focus(n) (n = half the arity)
# Ex : focus 3 == (f1 f2 f3) (f4 f5 f6) -> f1 f2 (f3 f4) f5 f6
coh focus2 (x0 : *) (x1 : *) (f1 : x0 -> x1)
                    (x2 : *) (f2 : x1 -> x2)
		    (x3 : *) (f3 : x2 -> x3)
		    (x4 : *) (f4 : x3 -> x4) :
		    comp (comp f1 f2) (comp f3 f4) -> comp f1 (comp f2 f3) f4

coh focus3 (x0 : *) (x1 : *) (f1 : x0 -> x1)
    	       	    (x2 : *) (f2 : x1 -> x2)
		    (x3 : *) (f3 : x2 -> x3)
		    (x4 : *) (f4 : x3 -> x4)
		    (x5 : *) (f5 : x4 -> x5)
		    (x6 : *) (f6 : x5 -> x6) :
		    comp (comp f1 f2 f3) (comp f4 f5 f6) -> comp f1 f2 (comp f3 f4) f5 f6

coh focus5 (x0 : *) (x1 : *) (f1 : x0 -> x1)
                    (x2 : *) (f2 : x1 -> x2)
		    (x3 : *) (f3 : x2 -> x3)
		    (x4 : *) (f4 : x3 -> x4)
		    (x5 : *) (f5 : x4 -> x5)
                    (x6 : *) (f6 : x5 -> x6)
		    (x7 : *) (f7 : x6 -> x7)
		    (x8 : *) (f8 : x7 -> x8)
		    (x9 : *) (f9 : x8 -> x9)
                    (x10 : *) (f10 : x9 -> x10)	:
		    comp (comp f1 f2 f3 f4 f5) (comp f6 f7 f8 f9 f10) -> comp f1 f2 f3 f4 (comp f5 f6) f7 f8 f9 f10

### Higher coherences for associators (cancellation lemmas)
# Format = nameU (name = name of the coherence) : cancellation of name and name-
#          nameCU                               : cancellation of name- and name

coh focus3U (x0 : *) (x1 : *) (f1 : x0 -> x1)
    	       	     (x2 : *) (f2 : x1 -> x2)
	  	     (x3 : *) (f3 : x2 -> x3)
		     (x4 : *) (f4 : x3 -> x4)
		     (x5 : *) (f5 : x4 -> x5)
		     (x6 : *) (f6 : x5 -> x6) :
		     comp (focus3 f1 f2 f3 f4 f5 f6) (I (focus3 f1 f2 f3 f4 f5 f6)) -> id (comp (comp f1 f2 f3) (comp f4 f5 f6))

coh focus3CU (x0 : *) (x1 : *) (f1 : x0 -> x1)
    	       	     (x2 : *) (f2 : x1 -> x2)
	  	     (x3 : *) (f3 : x2 -> x3)
		     (x4 : *) (f4 : x3 -> x4)
		     (x5 : *) (f5 : x4 -> x5)
		     (x6 : *) (f6 : x5 -> x6) :
		     comp (I (focus3 f1 f2 f3 f4 f5 f6)) (focus3 f1 f2 f3 f4 f5 f6) -> id (comp  f1 f2 (comp f3 f4) f5 f6)

### Unitors for composition
# Format = id(n)@(k) (n = arity, k < n, k = where to insert the identity)
coh id2@1 (x : *) (y : *) (f : x -> y) : comp (id x) f -> f
coh id2@2 (x : *) (y : *) (f : x -> y) : comp f (id y) -> f

coh id3@2 (x0 : *) (x1 : *) (f1 : x0 -> x1)
                   (x2 : *) (f2 : x1 -> x2) :
		   comp f1 (id x1) f2 -> comp f1 f2
### Coherences for rewriting a composition
# Format = rew(n)comp@(k) (n = arity, k < n, k = argument where to perform the rewriting)
#          rew(n)compA
coh rew2compA (x : *) (y : *) (f1 : x -> y)
    	      	      	       (f2 : x -> y) (a1 : f1 -> f2)
			       (f3 : x -> y) (a2 : f2 -> f3)
		       (z : *) (g1 : y -> z)
		       	       (g2 : y -> z) (b1 : g1 -> g2)
			       (g3 : y -> z) (b2 : g2 -> g3) :
	       comp (comp [a1] [b1]) (comp [a2] [b2]) -> comp [comp a1 a2] [comp b1 b2]

coh rew3compA (x0 : *) (x1 : *) (f1 : x0 -> x1) (g1 : x0 -> x1) (a1 : f1 -> g1)
    	      	       	     	      	        (h1 : x0 -> x1) (a2 : g1 -> h1)
                       (x2 : *) (f2 : x1 -> x2) (g2 : x1 -> x2) (b1 : f2 -> g2)
		      	       	     	        (h2 : x1 -> x2) (b2 : g2 -> h2)
		       (x3 : *) (f3 : x2 -> x3) (g3 : x2 -> x3) (c1 : f3 -> g3)
		       	     	      	    	(h3 : x2 -> x3) (c2 : g3 -> h3) :
     		       comp (comp [a1] [b1] [c1]) (comp [a2] [b2] [c2]) -> comp [comp a1 a2] [comp b1 b2] [comp c1 c2]

coh rew5comp@3 (x0 : *) (x1 : *) (f1 : x0 -> x1)
                        (x2 : *) (f2 : x1 -> x2)
		        (x3 : *) (f3 : x2 -> x3) (g3 : x2 -> x3) (a : f3 -> g3)
		                               (h3 : x2 -> x3) (b : g3 -> h3)
		        (x4 : *) (f4 : x3 -> x4)
		        (x5 : *) (f5 : x4 -> x5) :
		        comp (comp f1 f2 [a] f4 f5) (comp f1 f2 [b] f4 f5) -> comp f1 f2 [comp a b] f4 f5


### Coherences for rewriting an identity
# Format = rew(n)id@(k) (n = arity, k < n, k = argument where to perform the rewriting)
#          rew(n)idA
#          rew(n)Aid@(k) (n = arity, k < n, k = argument where to rewrite by identity)
coh rew2idA (x : *) (y : *) (f : x -> y) (z : *) (g : y -> z) :
comp [id f] [id g] -> id (comp f g)

coh rew3idA (x0 : *) (x1 : *) (f1 : x0 -> x1)
    	       	     (x2 : *) (f2 : x1 -> x2)
		     (x3 : *) (f3 : x2 -> x3) :
		     comp [id f1] [id f2] [id f3] -> id (comp f1 f2 f3)

coh rew5id@3 (x0 : *) (x1 : *) (f1 : x0 -> x1)
                      (x2 : *) (f2 : x1 -> x2)
		      (x3 : *) (f3 : x2 -> x3)
		      (x4 : *) (f4 : x3 -> x4)
		      (x5 : *) (f5 : x4 -> x5) :
		      comp f1 f2 [id f3] f4 f5 -> id (comp f1 f2 f3 f4 f5)


### Rewriting in a rewriting
# Format : rrew(n)@(k) (n = arity, k < n, k = where to perform the rewriting)
coh rrew2A (x : *) (y : *) (f : x -> y) (g : x -> y) (a0 : f -> g) (a1 : f -> g) (al : a0 -> a1)
    	      	   (z : *) (h : y -> z) (k : y -> z) (b0 : h -> k) (b1 : h -> k) (bet : b0 -> b1) :
		   comp [a0] [b0] -> comp [a1] [b1]

coh rrew3A (x0 : *) (x1 : *) (f1 : x0 -> x1) (g1 : x0 -> x1) (a1 : f1 -> g1) (a2 : f1 -> g1)
    	      	       	     	      	    	      	    	(al : a1 -> a2)
                       (x2 : *) (f2 : x1 -> x2) (g2 : x1 -> x2) (b1 : f2 -> g2) (b2 : f2 -> g2)
		       	     	      	    	      	    	(bet : b1 -> b2)
		       (x3 : *) (f3 : x2 -> x3) (g3 : x2 -> x3) (c1 : f3 -> g3) (c2 : f3 -> g3)
		       	     	      	    	      	    	(gam : c1 -> c2) :
     		       comp [a1] [b1] [c1] -> comp [a2] [b2] [c2]

coh rrew5@3 (x0 : *) (x1 : *) (f1 : x0 -> x1)
                     (x2 : *) (f2 : x1 -> x2)
		     (x3 : *) (f3 : x2 -> x3) (g3 : x2 -> x3) (a : f3 -> g3)
		       	    	     	    	     	      (b : f3 -> g3) (c : a -> b)
		     (x4 : *) (f4 : x3 -> x4)
		     (x5 : *) (f5 : x4 -> x5) :
		     comp f1 f2 [a] f4 f5 -> comp f1 f2 [b] f4 f5


### interchanging left and right unitors when possible
coh id2@/1-,2-/     (x : *) :  I (id2@1 (id x)) -> I (id2@2 (id x))
coh id2@/1,2/       (x : *) : id2@1 (id x) -> id2@2 (id x)


### cancelling left and right unitors
coh id2@2@1U  (x : *) : comp (id2@2 (id x)) (I (id2@1 (id x))) -> id (comp (id x) (id x))
coh id2@1@2U   (x : *) : comp (id2@1 (id x)) (I (id2@2 (id x))) -> id (comp (id x) (id x))

### DEFINITION OF TACTICS

### Some "focused" versions of cancellation lemmas
# Format = "nameF" (F = focused) : cancellation and association combined
coh id5@3F (x1 : *) (x2 : *) (f1 : x1 -> x2) (x3 : *) (f2 : x2 -> x3) (x4 : *) (f3 : x3 -> x4) (x5 : *) (f4 : x4 -> x5) :
comp f1 f2 (id x3) f3 f4 -> comp f1 (comp f2 f3) f4

coh id5@3F- (x1 : *) (x2 : *) (f1 : x1 -> x2) (x3 : *) (f2 : x2 -> x3) (x4 : *) (f3 : x3 -> x4) (x5 : *) (f4 : x4 -> x5) :
comp f1 (comp f2 f3) f4 -> comp f1 f2 (id x3) f3 f4

coh id5@3FU (x1 : *) (x2 : *) (f1 : x1 -> x2) (x3 : *) (f2 : x2 -> x3) (x4 : *) (f3 : x3 -> x4) (x5 : *) (f4 : x4 -> x5) :
comp (id5@3F f1 f2 f3 f4) (id5@3F- f1 f2 f3 f4) -> id (comp f1 f2 (id x3) f3 f4)

coh id5@3FU- (x1 : *) (x2 : *) (f1 : x1 -> x2) (x3 : *) (f2 : x2 -> x3) (x4 : *) (f3 : x3 -> x4) (x5 : *) (f4 : x4 -> x5) :
id (comp f1 f2 (id x3) f3 f4) -> comp (id5@3F f1 f2 f3 f4) (id5@3F- f1 f2 f3 f4)

coh id5@3FCU (x1 : *) (x2 : *) (f1 : x1 -> x2) (x3 : *) (f2 : x2 -> x3) (x4 : *) (f3 : x3 -> x4) (x5 : *) (f4 : x4 -> x5) :
comp (id5@3F- f1 f2 f3 f4) (id5@3F f1 f2 f3 f4) -> id (comp f1 (comp f2 f3) f4)

coh id7@4F (x1 : *) (x2 : *) (f1 : x1 -> x2) (x3 : *) (f2 : x2 -> x3) (x4 : *) (f3 : x3 -> x4) (x5 : *) (f4 : x4 -> x5) (x6 : *) (f5 : x5 -> x6) (x7 : *) (f6 : x6 -> x7) :
comp f1 f2 f3 (id x4) f4 f5 f6 -> comp f1 f2 (comp f3 f4) f5 f6

coh id9@5F (x1 : *) (x2 : *) (f1 : x1 -> x2) (x3 : *) (f2 : x2 -> x3) (x4 : *) (f3 : x3 -> x4) (x5 : *) (f4 : x4 -> x5) (x6 : *) (f5 : x5 -> x6) (x7 : *) (f6 : x6 -> x7) (x8 : *) (f7 : x7 -> x8) (x9 : *) (f8 : x8 -> x9) :
comp f1 f2 f3 f4 (id x5) f5 f6 f7 f8 -> comp f1 f2 f3 (comp f4 f5) f6 f7 f8


### Tactics for simplification
# format = simpl(n) (n = arity) : simplifies f1 f2  f(2n-1) f(2n) into identity
let simpl2 (x0 : *) (x1 : *) (x2 : *)
    	   (f1 : x0 -> x1) (f2 : x1 -> x2) (f3 : x2 -> x1) (f4 : x1 -> x0)
	   (s1 : comp f1 f4 -> id x0) (s2 : comp f2 f3 -> id x1) =
	   comp (comp f1 [s2] f4)
	   	 (id3@2 f1 f4)
		 s1

let simpl2F (x0 : *) (x1 : *) (x2 : *)
    	    (f1 : x0 -> x1) (f2 : x1 -> x2) (f3 : x2 -> x1) (f4 : x1 -> x0)
	    (s1 : comp f1 f4 -> id x0) (s2 : comp f2 f3 -> id x1) =
	    comp (focus2 f1 f2 f3 f4)
	    	 (simpl2 s1 s2)

let simpl3 (x0 : *) (x1 : *) (x2 : *) (x3 : *)
    	   (f1 : x0 -> x1) (f2 : x1 -> x2) (f3 : x2 -> x3)
	   (f4 : x3 -> x2) (f5 : x2 -> x1) (f6 : x1 -> x0)
	   (s1 : comp f1 f6 -> id x0) (s2 : comp f2 f5 -> id x1) (s3 : comp f3 f4 -> id x2) =
	   comp (comp f1 f2 [s3] f5 f6)
	   	 (id5@3F f1 f2 f5 f6)
		 (simpl2 s1 s2)

let simpl4 (x0 : *) (x1 : *) (x2 : *) (x3 : *) (x4 : *)
    	   (f1 : x0 -> x1) (f2 : x1 -> x2) (f3 : x2 -> x3) (f4 : x3 -> x4)
	   (f5 : x4 -> x3) (f6 : x3 -> x2) (f7 : x2 -> x1) (f8 : x1 -> x0)
	   (s1 : comp f1 f8 -> id x0) (s2 : comp f2 f7 -> id x1)
	   (s3 : comp f3 f6 -> id x2) (s4 : comp f4 f5 -> id x3) =
	   comp (comp f1 f2 f3 [s4] f6 f7 f8)
	   	 (id7@4F f1 f2 f3 f6 f7 f8)
		 (simpl3 s1 s2 s3)

let simpl5 (x0 : *) (x1 : *) (x2 : *) (x3 : *) (x4 : *) (x5 : *)
    	   (f1 : x0 -> x1) (f2 : x1 -> x2) (f3 : x2 -> x3) (f4 : x3 -> x4) (f5 : x4 -> x5)
	   (f6 : x5 -> x4) (f7 : x4 -> x3) (f8 : x3 -> x2) (f9 : x2 -> x1) (f10 : x1 -> x0)
	   (s1 : comp f1 f10 -> id x0) (s2 : comp f2 f9 -> id x1)
	   (s3 : comp f3 f8 -> id x2) (s4 : comp f4 f7 -> id x3)
	   (s5 : comp f5 f6 -> id x4) =
	   comp (comp f1 f2 f3 f4 [s5] f7 f8 f9 f10)
	   	 (id9@5F f1 f2 f3 f4 f7 f8 f9 f10)
		 (simpl4 s1 s2 s3 s4)

let simpl5F (x0 : *) (x1 : *) (x2 : *) (x3 : *) (x4 : *) (x5 : *)
    	    (f1 : x0 -> x1) (f2 : x1 -> x2) (f3 : x2 -> x3) (f4 : x3 -> x4) (f5 : x4 -> x5)
	    (f6 : x5 -> x4) (f7 : x4 -> x3) (f8 : x3 -> x2) (f9 : x2 -> x1) (f10 : x1 -> x0)
	    (s1 : comp f1 f10 -> id x0) (s2 : comp f2 f9 -> id x1)
	    (s3 : comp f3 f8 -> id x2) (s4 : comp f4 f7 -> id x3)
	    (s5 : comp f5 f6 -> id x4) =
	    comp (focus5 f1 f2 f3 f4 f5 f6 f7 f8 f9 f10)
	   	 (simpl5 s1 s2 s3 s4 s5)

### Tactics to simplify rewriting
# simplifies any rewriting by a cell then its inverse into the identity
let simplrew2A (x : *) (y : *) (z : *)
    	       (f1 : x -> y) (f2 : x -> y) (g1 : y -> z) (g2 : y -> z)
	       (a1 : f1 -> f2) (a2 : f2 -> f1) (b1 : g1 -> g2) (b2 : g2 -> g1)
	       (aU : comp a1 a2 -> id f1) (bU : comp b1 b2 -> id g1) =
	       comp (rew2compA a1 a2 b1 b2)
	       	     (rrew2A aU bU)
		     (rew2idA f1 g1)

let simplrew3A (x0 : *) (x1 : *) (x2 : *) (x3 : *)
    	       (f1 : x0 -> x1) (g1 : x0 -> x1) (f2 : x1 -> x2) (g2 : x1 -> x2)
	       	     	       	     	       (f3 : x2 -> x3) (g3 : x2 -> x3)
	       (a1 : f1 -> g1) (a2 : g1 -> f1) (b1 : f2 -> g2) (b2 : g2 -> f2)
	       	     	       	     	       (c1 : f3 -> g3) (c2 : g3 -> f3)
	       (aU : comp a1 a2 -> id f1) (bU : comp b1 b2 -> id f2) (cU : comp c1 c2 -> id f3) =
comp (rew3compA a1 a2 b1 b2 c1 c2)
      (rrew3A aU bU cU)
      (rew3idA f1 f2 f3)

let simplrew5 (x0 : *) (x1 : *) (x2 : *) (x3 : *) (x4 : *) (x5 : *)
    	      (f1 : x0 -> x1) (f2 : x1 -> x2)
	      (f3 : x2 -> x3) (g3 : x2 -> x3) (a : f3 -> g3) (b : g3 -> f3) (abU : comp a b -> id f3)
	      (f4 : x3 -> x4) (f5 : x4 -> x5)  =
comp (rew5comp@3 f1 f2 a b f4 f5)
      (rrew5@3 f1 f2 abU f4 f5)
      (rew5id@3 f1 f2 f3 f4 f5)


### Tactics for reducing
# simplifies a composition f1 f2  f(2n-1) f(2n) into a smaller composition when some intermediate cells cancel
let red3 (x0 : *) (x1 : *) (x2 : *) (x2m : *) (x3 : *) (x4 : *)
    	  (f1 : x0 -> x1) (f2 : x1 -> x2)
	  (f3 : x2 -> x2m) (f4 : x2m -> x2) (s : comp f3 f4 -> id x2)
	  (f5 : x2 -> x3) (f6 : x3 -> x4) =
	 comp (comp f1 f2 [s] f5 f6)
	      (id5@3F f1 f2 f5 f6)

let red3- (x0 : *) (x1 : *) (x2 : *) (x2m : *) (x3 : *) (x4 : *)
    	  (f1 : x0 -> x1) (f2 : x1 -> x2)
	  (f3 : x2 -> x2m) (f4 : x2m -> x2) (s : id x2 -> comp f3 f4)
	  (f5 : x2 -> x3) (f6 : x3 -> x4) =
	  comp (id5@3F- f1 f2 f5 f6)
     	       (comp f1 f2 [s] f5 f6)

let red3F (x0 : *) (x1 : *) (x2 : *) (x2m : *) (x3 : *) (x4 : *)
    	  (f1 : x0 -> x1) (f2 : x1 -> x2)
	  (f3 : x2 -> x2m) (f4 : x2m -> x2) (s : comp f3 f4 -> id x2)
	  (f5 : x2 -> x3) (f6 : x3 -> x4) =
	  comp (focus3 f1 f2 f3 f4 f5 f6)
	       (red3 f1 f2 s f5 f6)

let red3F- (x0 : *) (x1 : *) (x2 : *) (x2m : *) (x3 : *) (x4 : *)
    	   (f1 : x0 -> x1) (f2 : x1 -> x2)
	   (f3 : x2 -> x2m) (f4 : x2m -> x2) (s : id x2 -> comp f3 f4)
	   (f5 : x2 -> x3) (f6 : x3 -> x4) =
	   comp (red3- f1 f2 s f5 f6)
	        (I (focus3 f1 f2 f3 f4 f5 f6))

let red3U (x0 : *) (x1 : *) (x2 : *) (x2m : *) (x3 : *) (x4 : *)
    	  (f1 : x0 -> x1) (f2 : x1 -> x2)
	  (f3 : x2 -> x2m) (f4 : x2m -> x2) (s1 : comp f3 f4 -> id x2) (s2 : id x2 -> comp f3 f4)
	  (sU : comp s1 s2 -> id (comp f3 f4))
	  (f5 : x2 -> x3) (f6 : x3 -> x4) :
comp (red3 f1 f2 s1 f5 f6) (red3- f1 f2 s2 f5 f6) -> id (comp f1 f2 (comp f3 f4) f5 f6) =
simpl2F (simplrew5 f1 f2 sU f5 f6)
	(id5@3FU f1 f2 f5 f6)

let red3FU (x0 : *) (x1 : *) (x2 : *) (x2m : *) (x3 : *) (x4 : *)
    	   (f1 : x0 -> x1) (f2 : x1 -> x2)
	   (f3 : x2 -> x2m) (f4 : x2m -> x2) (s1 : comp f3 f4 -> id x2) (s2 : id x2 -> comp f3 f4)
	   (sU : comp s1 s2 -> id (comp f3 f4))
	   (f5 : x2 -> x3) (f6 : x3 -> x4) :
comp (red3F f1 f2 s1 f5 f6) (red3F- f1 f2 s2 f5 f6) -> id (comp (comp f1 f2 f3) (comp f4 f5 f6)) =
simpl2F (focus3U f1 f2 f3 f4 f5 f6)
	(red3U f1 f2 sU f5 f6)

let red3CU (x0 : *) (x1 : *) (x2 : *) (x2m : *) (x3 : *) (x4 : *)
    	   (f1 : x0 -> x1) (f2 : x1 -> x2)
	   (f3 : x2 -> x2m) (f4 : x2m -> x2)  (s1 : id x2 -> comp f3 f4) (s2 : comp f3 f4 -> id x2)
	   (sU : comp s1 s2 -> id (id x2))
	   (f5 : x2 -> x3) (f6 : x3 -> x4) :
comp (red3- f1 f2 s1 f5 f6) (red3 f1 f2 s2 f5 f6) -> id (comp f1 (comp f2 f5) f6)  =
simpl2F (id5@3FCU f1 f2 f5 f6)
	(simplrew5 f1 f2 sU f5 f6)

let red3FCU (x0 : *) (x1 : *) (x2 : *) (x2m : *) (x3 : *) (x4 : *)
    	    (f1 : x0 -> x1) (f2 : x1 -> x2)
	    (f3 : x2 -> x2m) (f4 : x2m -> x2)  (s1 : id x2 -> comp f3 f4) (s2 : comp f3 f4 -> id x2)
	    (sU : comp s1 s2 -> id (id x2))
	    (f5 : x2 -> x3) (f6 : x3 -> x4) :
comp (red3F- f1 f2 s1 f5 f6) (red3F f1 f2 s2 f5 f6) -> id (comp f1 (comp f2 f5) f6)  =
simpl2F (red3CU f1 f2 sU f5 f6)
	(focus3CU f1 f2 f3 f4 f5 f6)



### Some operations on 2-cells
# Format = rew(n)@(k)id@(l)R :substituting id in the place l in the coherence rew(n)@(k), and rewriting the source and target to match with the orginal two cell
#                            (R = reduced)
#          rew(n)@(k)id@(l)  :unitor for the substitution of id in the place l in the coherence rew(n)@(k)
let rew2@2id@1R (x : *) (y : *) (f : x -> y) (g : x -> y) (a : f -> g) =
    comp (I (id2@1 f)) (comp (id x) [a]) (id2@1 g)

coh rew2@2id@1 (x : *) (y : *) (f : x -> y) (g : x -> y) (a : f -> g) :
    rew2@2id@1R a -> a

let rew2@1id@2R (x : *) (y : *) (f : x -> y) (g : x -> y) (a : f -> g) =
    comp (I (id2@2 f)) (comp [a] (id y)) (id2@2 g)

coh rew2@1id@2 (x : *) (y : *) (f : x -> y) (g : x -> y) (a : f -> g) :
    rew2@1id@2R a -> a

# Format = exch : exchange rule
coh exch (x : *) (y : *) (f : x -> y) (g : x -> y) (a : f -> g)
    	      	 (z : *) (h : y -> z) (k : y -> z) (b : h -> k) :
		 comp (comp [a] h) (comp g [b]) -> comp (comp f [b]) (comp [a] k)

coh exchU (x : *) (y : *) (f : x -> y) (g : x -> y) (a : f -> g)
    	      	  (z : *) (h : y -> z) (k : y -> z) (b : h -> k) :
comp (exch a b) (I (exch a b)) -> id (comp (comp [a] h) (comp g [b]))

### Eckmann-Hilton morphism, inverse and cancellation
let eh (x : *) (a : id x -> id x) (b : id x  -> id x) =
    comp  (comp [I (rew2@1id@2 a)] [I (rew2@2id@1 b)])
	  (red3F (I (id2@2 (id x))) (comp [a] (id x)) (id2@2@1U x) (comp (id x) [b]) (id2@1 (id x)))
	  (comp [I (id2@/1-,2-/ x)] [exch a b] [id2@/1,2/ x])
	  (red3F- (I (id2@1 (id x))) (comp (id x) [b]) (I (id2@1@2U x)) (comp [a] (id x)) (id2@2 (id x)))
	  (comp [rew2@2id@1 b] [rew2@1id@2 a])

let eh- (x : *) (a : id x -> id x) (b : id x  -> id x) = I (eh a b)

### Higher Cells for cancelling Eckmann-Hilton morphism with its inverse
# coh rew2@1id@2U (x : *) (y : *) (f : x -> y) (g : x -> y) (a : f -> g) :
#     comp (rew2@1id@2 a) (rew2@1id@2- a) -> id (rew2@1id@2R a)
# coh rew2@1id@2CU (x : *) (y : *) (f : x -> y) (g : x -> y) (a : f -> g) :
#     comp (rew2@1id@2- a) (rew2@1id@2 a) -> id a

# coh rew2@2id@1U (x : *) (y : *) (f : x -> y) (g : x -> y) (a : f -> g) :
#     comp (rew2@2id@1 a) (rew2@2id@1- a) -> id (rew2@2id@1R a)
# coh rew2@2id@1CU (x : *) (y : *) (f : x -> y) (g : x -> y) (a : f -> g) :
#     comp (rew2@2id@1- a) (rew2@2id@1 a) -> id a

# coh id2@1@2UCU (x: *) : comp (id2@1@2U- x) (id2@1@2U x) -> id (id (comp (id x) (id x)))
# coh id2@2@1UU (x: *) : comp (id2@2@1U x) (id2@2@1U- x) -> id (comp (id2@2 (id x)) (id2@1- (id x)))
# coh id2@/1-,2-/CU   (x : *) : comp (id2@/1-,2-/- x) (id2@/1-,2-/ x) ->  id (id2@2- (id x))
# coh id2@/1,2/U      (x : *) : comp (id2@/1,2/ x) (id2@/1,2/- x) -> (id (id2@1 (id x)))

# let ehU (x : *) (a : id x -> id x) (b : id x  -> id x) :
# comp (eh a b) (eh- b a) -> id (comp a b) =
# simpl5F (simplrew2A (rew2@1id@2CU a) (rew2@2id@1CU b))
# 	(red3FU (id2@2- (id x)) (comp [a] (id x)) (id2@2@1UU x) (comp (id x) [b]) (id2@1 (id x)))
# 	(simplrew3A (id2@/1-,2-/CU x) (exchU a b) (id2@/1,2/U x))
# 	(red3FCU (id2@1- (id x)) (comp (id x) [b]) (id2@1@2UCU x) (comp [a] (id x)) (id2@2 (id x)))
# 	(simplrew2A (rew2@2id@1U b) (rew2@1id@2U a))
